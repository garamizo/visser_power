<launch>
	<!-- Define static transformations -->
	<node pkg="tf" type="static_transform_publisher" name="t1a" args="-10e-3 90e-3 40e-3 -1.57 0 -1.57 gripper cam120 10" />
	<!-- <node pkg="tf" type="static_transform_publisher" name="t1b" args="30e-3 80e-3 75e-3 3.14 -1.57 0 biceps_link long_cam 100" /> -->
	<node pkg="tf" type="static_transform_publisher" name="t2" args="0 -120e-3 130e-3 0 1.57 -1.57 ar_marker_0 female 10" />
	<node pkg="tf" type="static_transform_publisher" name="t3" args="-100e-3 0 0 0 0 0 female _female 10" />
	<node pkg="tf" type="static_transform_publisher" name="t5" args="100e-3 	0        150e-3 0 0.5 0  base search1 10" />
	<node pkg="tf" type="static_transform_publisher" name="t6" args="80e-3  	80e-3   150e-3 0.7854 0.5 0 base search2 10" />
	<node pkg="tf" type="static_transform_publisher" name="t7" args="80e-3  -80e-3 150e-3 -0.7854 0.5 0 base search3 10" />
	<node pkg="tf" type="static_transform_publisher" name="t8" args="0 0 0 0 0.785 0 gripper male 10" />

	<!--node pkg="visual_servoing_powergrid" type="visser.py" name="main" /-->


	<arg name="camera_frame_id" default="cam120" />
	<arg name="camera_info_url" default="file://$(find visual_servoing_powergrid)/calib/cam120.yml" />

<!-- 	<arg name="camera_frame_id" default="fisheye_cam" />
	<arg name="camera_info_url" default="file://$(find visual_servoing_powergrid)/calib/cal.yml" /> -->

	<!--include file="$(find usb_cam)/launch/usb_cam-test.launch"/-->
	<node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
		<param name="video_device" value="/dev/video0" />
		<param name="image_width" value="640" />
		<param name="image_height" value="480" />
		<param name="pixel_format" value="yuyv" />
		<param name="camera_frame_id" value="$(arg camera_frame_id)" />
		<param name="camera_info_url" value="$(arg camera_info_url)" />
		<param name="io_method" value="mmap"/>
		<param name="framerate" value="30"/>
	</node>


<!-- 	<node pkg="nodelet" type="nodelet" name="crop_manager" args="manager" output="screen" />

	<node pkg="nodelet" type="nodelet" name="image_proc_decimate" output="screen" args="load image_proc_custom/crop_decimate crop_manager" >
		<param name="width" value="200" />
		<param name="height" value="200" />
		<param name="x_offset" value="100" />
		<param name="y_offset" value="100" />

		<remap from="camera/image_raw" to="usb_cam/image_raw" /> 
		<remap from="camera_out" to="roi"/>
	</node> -->


	<arg name="marker_size" default="5" />
	<arg name="max_new_marker_error" default="0.1" />
	<arg name="max_track_error" default="0.2" />

	<arg name="cam_image_topic" default="/usb_cam/image_raw" />
	<arg name="cam_info_topic" default="/usb_cam/camera_info" />

	<arg name="output_frame" default="$(arg camera_frame_id)" />
	<arg name="bundle_files" default="$(find visual_servoing_powergrid)/bundle/bundle2.xml" />

	<node name="ar_track_alvar" pkg="ar_track_alvar" type="findMarkerBundlesNoKinect" respawn="false" output="screen" args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame) $(arg bundle_files)" />

<!-- 	<node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="false" output="screen" args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame)" /> -->


	<node name="arbotix" pkg="arbotix_python" type="arbotix_driver" output="screen">
		<rosparam file="$(find visual_servoing_powergrid)/config/arbotix.yaml" command="load" />
	</node>

<!-- 	<node pkg="visual_servoing_powergrid" type="robot_sim.py" name="simulator" /> -->


	<param name="robot_description" command="cat $(find visual_servoing_powergrid)/urdf/widowx2.urdf" />
	<param name="use_gui" value="True"/>
	<!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /-->

	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />
	<!-- <node name="rviz" pkg="rviz" type="rviz" output="screen" /> -->

	<node name="rectify" pkg="image_proc" type="image_proc" respawn="false" output="screen" ns="/usb_cam"/>

</launch>